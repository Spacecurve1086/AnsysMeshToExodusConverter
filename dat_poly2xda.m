function outputNumber = dat_poly2xda(inputDAT_POLYfile, outputXDAfile, ELEMtype)
    % dat2xda(inputDATfile, outputXDAfile, ELEMtype)
    %
    % all arguments are strings and input must be enclosed in single quotes
    %
    % INPUT: Finite element mesh file generated by ANSYS for SINGLE BODY
    %        and with linear mesh elements (in default under mesh options
    %        in ANSYS -> "Element Order" set to "Linear". Either .dat or
    %        .poly files will work.
    %
    % OUTPUT: File with extension .xda that is an EXODUS finite element mesh
    %         (this mesh file can be used to be read by libMesh or by IBAMR)
    %         This file does not have any info about FE boundary conditions!
    %         It contains only values of coordinates of all nodes in the mesh
    %         and the entire element connectivity vector for this mesh.
    %
    % inputMPHTXTfile is a string that is the name of the file generated by
    % ANSYS (make sure it is in the same directory as this function file)
    %
    % outputXDAfile is the file that this script will generate and put in
    % the current directory (this file is provided to IBAMR for simulations)


    % note that string comparison is case-insensitive
    if ~strcmpi(ELEMtype,'tet') && ~strcmpi(ELEMtype,'hex')
        error('Unsupported finite element type! Only "tet" and "hex" allowed.');
    end



    % open dat file for reading
    inputFile = fopen(inputDAT_POLYfile,'r');

    % read the file into memory (NOTE: cannot be done for huge dat files)
    ansysData = textscan(inputFile, '%s', 'delimiter', '\n');

    % open EXODUS file for writing
    outputFile = fopen(outputXDAfile,'w');
    if strcmpi(ELEMtype,'tet')
        numberOfNodesPerElement = 4;    % ANSYS defaults to 8 nodes per volume
        libMeshElementID = 8;           % for tetrahedral elements
    elseif strcmpi(ELEMtype,'hex')
        numberOfNodesPerElement = 8;    % ANSYS defaults to 8 nodes per volume
        libMeshElementID = 10;          % for hex-dominant elements
    end
    if strcmpi(inputDAT_POLYfile(end-2:end),'dat')
        % //////////////////////// FIND NUMBER OF NODES ////////////////////////

        % Find the text string "/com,************ Nodes for the whole assembly ***********" in the dat file
        % Should always be line 23
        idx1 = find(strcmp(ansysData{1}, '/com,*********** Nodes for the whole assembly ***********'), 1, 'first');

        % Find the text string "/com,*********** Elements for Body 1 "Solid" ***********"
        idx2 = find(strcmp(ansysData{1}, '/com,*********** Elements for Body 1 "Solid" ***********'), 1, 'first');

        numberOfNodes = idx2 - idx1 - 5;  % the '5' is due to line offset in file

        % //////////////////////// FIND NUMBER OF ELEMENTS /////////////////////

        % Find line containing number of elements
        RelevantLine = find(strcmp(ansysData{1}, '(19i9)'),1,'first')-1;
        RelevantLine = ansysData{1}{RelevantLine};
        numberOfElements = RelevantLine(18:end);    % the '18' is due to number of characters before element number
        numberOfElements = str2num(numberOfElements);

        % connectivity vector length = (number of nodes per element) x numberOfElements
        connectivityVectorLength = numberOfElements * (numberOfNodesPerElement+2);

        % write XDA header info to file
        fprintf(outputFile, 'LIBM\t0\n');
        fprintf(outputFile, '%d\t# Num. Elements\n',numberOfElements);
        fprintf(outputFile, '%d\t# Num. Nodes\n',numberOfNodes);
        fprintf(outputFile, '%d\t# Length of connectivity vector\n',connectivityVectorLength);
        fprintf(outputFile, '0\t\t# Num. Boundary Conds.\n');
        fprintf(outputFile, '65536\t# String Size (ignore)\n');
        fprintf(outputFile, '1\t\t# Num. Element Blocks\n');
        fprintf(outputFile, '%d\t\t# Element types in each block.\n', libMeshElementID);
        fprintf(outputFile, '%d\t# Num. of elements in each block at each level.\n', numberOfElements);
        fprintf(outputFile, 'Id String\n');
        fprintf(outputFile, 'Title String\n');

        % ///////////////////// WRITE CONNECTIVITY MATRIX TO FILE //////////////
        for i=1:numberOfElements

            % get nodes of element from file
            nodesOfElement = ansysData{1}(idx2+i+3);

            % convert CELL to CHAR then CHAR to INT
            nodesOfElement = str2num(char(nodesOfElement));
            nodesOfElement = unique(nodesOfElement(12:end),'stable');
            % put each elments nodes in a row (sequence matters!)
            for j=1:length(nodesOfElement)
                fprintf(outputFile,'%d\t', nodesOfElement(j)-1);    % Minus one so first node is zero (ANSYS defaults to one as first node)
            end

            fprintf(outputFile, '%d\t', i-1);   % Minus one so first element is zero
            fprintf(outputFile, '-1\n');
        end

        % //////////////////////// WRITE NODE COORDS TO FILE ///////////////////

        % find beginning of node coordinate listing

        for i = 1:numberOfNodes

            % get node coordinates from file
            nodeCoordinates = ansysData{1}(idx1+i+2);

            nodeCoordinates = str2num(cell2mat(nodeCoordinates));

            fprintf(outputFile, '%.15f\t', nodeCoordinates(2));
            fprintf(outputFile, '%.15f\t', nodeCoordinates(3));
            if i==numberOfNodes
                fprintf(outputFile, '%.15f', nodeCoordinates(4));
            else
                fprintf(outputFile, '%.15f\n', nodeCoordinates(4));
            end
        end
        fclose('all');
%     elseif strcmpi(inputDAT_POLYfile(end-3:end),'poly')
%         % //////////////////////// FIND NUMBER OF NODES ////////////////////////
% 
%         idx1 = 5;
%         
%         % Find the text string "/com,*********** Elements for Body 1 "Solid" ***********"
%         idx2 = find(strcmp(ansysData{1}, ""), 2, 'last');
%         idx2 = idx2(2);
% 
%         numberOfNodes = (idx2-idx1+1)/3;
%         
%         % //////////////////////// FIND NUMBER OF ELEMENTS /////////////////////
%         
%         count = 1;
%         val = str2num(ansysData{1}{idx2+2});
%         val = val(1);
%         
%         while 1
%             val2 = str2num(ansysData{1}{idx2+3*count-1});
%             if val ~= val2(1)
%                 break
%             else
%                 count = count + 1;
%             end
%         end
%         numberOfElements = count - 1;
% 
%         % connectivity vector length = (number of nodes per element) x numberOfElements
%         connectivityVectorLength = numberOfElements * (numberOfNodesPerElement+2);
% 
%         % write XDA header info to file
%         fprintf(outputFile, 'LIBM\t0\n');
%         fprintf(outputFile, '%d\t# Num. Elements\n',numberOfElements);
%         fprintf(outputFile, '%d\t# Num. Nodes\n',numberOfNodes);
%         fprintf(outputFile, '%d\t# Length of connectivity vector\n',connectivityVectorLength);
%         fprintf(outputFile, '0\t\t# Num. Boundary Conds.\n');
%         fprintf(outputFile, '65536\t# String Size (ignore)\n');
%         fprintf(outputFile, '1\t\t# Num. Element Blocks\n');
%         fprintf(outputFile, '%d\t\t# Element types in each block.\n', libMeshElementID);
%         fprintf(outputFile, '%d\t# Num. of elements in each block at each level.\n', numberOfElements);
%         fprintf(outputFile, 'Id String\n');
%         fprintf(outputFile, 'Title String\n');
% 
%         % ///////////////////// WRITE CONNECTIVITY MATRIX TO FILE //////////////
%         for i=1:numberOfElements
% 
%             % get nodes of element from file
%             nodesOfElement = ansysData{1}(idx2+3*i);
% 
%             % convert CELL to CHAR then CHAR to INT
%             nodesOfElement = str2num(char(nodesOfElement));
%             
%             % put each elments nodes in a row (sequence matters!)
%             for j=1:length(nodesOfElement)
%                 fprintf(outputFile,'%d\t', nodesOfElement(j)-1);    % Minus one so first node is zero (ANSYS defaults to one as first node)
%             end
% 
%             fprintf(outputFile, '%d\t', i-1);   % Minus one so first element is zero
%             fprintf(outputFile, '-1\n');
%         end
% 
%         % //////////////////////// WRITE NODE COORDS TO FILE ///////////////////
% 
%         % find beginning of node coordinate listing
% 
%         for i = 1:numberOfNodes
% 
%             % get node coordinates from file
%             nodeCoordinates = ansysData{1}(idx1+3*i-2);
% 
%             nodeCoordinates = str2num(cell2mat(nodeCoordinates));
% 
%             fprintf(outputFile, '%.15f\t', nodeCoordinates(1));
%             fprintf(outputFile, '%.15f\t', nodeCoordinates(2));
%             fprintf(outputFile, '%.15f\n', nodeCoordinates(3));
%         end
%         fclose('all');
    end
end